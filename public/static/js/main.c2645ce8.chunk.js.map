{"version":3,"sources":["logo.svg","config/api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BASEURL","process","REACT_APP_HOST","PROD_BASEURL","REACT_APP_PROD_BASEURL","window","location","origin","production","baseURL","development","App","useState","interactions","setInteractions","text","setText","socket","setSocket","event","user","typing","setTyping","userTyping","setUserTyping","sendMessage","preventDefault","typingOff","emit","delayedTypingOff","_","trailing","useEffect","socketInstance","io","api","on","object","i","disconnect","id","length","el","document","getElementById","elTyping","appContainer","scrollTo","offsetTop","scrollToEnd","className","src","logo","alt","Container","map","item","index","type","sender","Row","key","Col","md","span","offset","Card","bg","Body","Subtitle","Text","fluid","onSubmit","InputGroup","FormControl","placeholder","aria-label","aria-describedby","value","onChange","target","onBlur","Append","Button","onClick","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c2645ce8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const BASEURL = process.env.REACT_APP_HOST || 'http://localhost';\nconst PORT = process.env.REACT_APP_PORT || 3000;\nconst PROD_BASEURL = process.REACT_APP_PROD_BASEURL || window.location.origin;\n\nexport default {\n  production: {\n    baseURL: PROD_BASEURL,\n  },\n  development: {\n    baseURL: `${BASEURL}:${PORT}`\n  }\n}","import React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { Container, Row, Col, Card, InputGroup, FormControl, Button } from 'react-bootstrap';\nimport * as _ from 'lodash';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport api from './config/api';\n\nfunction App() {\n  const [interactions, setInteractions] = useState([]);\n  const [text, setText] = useState('');\n  const [socket, setSocket] = useState(null);\n  const [typing, setTyping] = useState({\n    event: false,\n    user: null\n  });\n  const [userTyping, setUserTyping] = useState(false);\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n    \n    if (!text) {\n      return;\n    }\n\n    typingOff();\n    \n    socket.emit('message', text);\n    setText('');\n  }\n\n  const typingOff = () => {\n    if (userTyping) {\n      setUserTyping(false);\n      socket.emit('typing', false);\n    }\n  }\n\n  const typingOn = () => {\n    if (!userTyping) {\n      setUserTyping(true);\n      socket.emit('typing', true);\n    }\n  }\n\n  const delayedTypingOff = _.debounce(typingOff, 5000, { trailing: true }) \n\n  const handleChange = (event) => {\n    typingOn();\n\n    delayedTypingOff();\n    \n    setText(event.target.value);\n  }\n  \n  const scrollToEnd = () => {\n    const id = interactions.length - 1;\n    const el = document.getElementById('' + id);\n    const elTyping = document.getElementById('app-typing');\n    const appContainer = document.getElementById('app-container');\n    if (!!el) {\n      appContainer.scrollTo(0, el.offsetTop);\n    }\n    if (!!elTyping) {\n      appContainer.scrollTo(0, elTyping.offsetTop);\n    }\n  }\n\n  useEffect(() => {\n    const NODE_ENV = process.env.NODE_ENV;\n    const socketInstance = io(`${api[NODE_ENV].baseURL}/socket`);\n    \n    setSocket(socketInstance);\n    \n    socketInstance.on('message', (object) => {\n      setInteractions(i => [...i, object]);\n    })\n    socketInstance.on('typing', (object) => {\n      setTyping(object);\n    })\n    \n    return () => {\n      socket.disconnect();\n    }\n  }, [])\n\n  useEffect(() => {\n    scrollToEnd();\n  }, [interactions.length, typing])\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <img src={logo} alt=\"logo\" className=\"App-logo\" />\n        <h1>{process.env.REACT_APP_WEBSITE_NAME}</h1>\n      </div>\n      <div id=\"app-container\" className=\"App-container\">\n        <Container>\n          {\n            interactions.map((item, index) => {\n              if (item.type === 'text') {\n                if (item.sender === socket.id) {\n                  return (\n                    <Row id={index} key={index} className=\"mt-3\">\n                      <Col md={{ span: 5, offset: 7 }}>\n                        <Card bg=\"info\">\n                          <Card.Body>\n                            <Card.Subtitle className=\"mb-2 text-muted\">\n                              {item.sender}\n                            </Card.Subtitle>\n                            <Card.Text>\n                              {item.text}\n                            </Card.Text>\n                          </Card.Body>\n                        </Card>\n                      </Col>    \n                    </Row>\n                  )\n                } else {\n                  return (\n                    <Row id={index} key={index} className=\"mt-3\">\n                      <Col md={5}>\n                        <Card>\n                          <Card.Body>\n                            <Card.Subtitle className=\"mb-2 text-muted\">\n                              {item.sender}\n                            </Card.Subtitle>\n                            <Card.Text>\n                              {item.text}\n                            </Card.Text>\n                          </Card.Body>\n                        </Card>\n                      </Col>\n                    </Row>\n                  )\n                }\n              }\n              if (item.type === 'event') {\n                return (\n                  <Row id={index} key={index} className=\"justify-content-md-center mt-3\">\n                    <Card bg=\"secondary\" text=\"white\">\n                      <Card.Text className=\"mx-3\">\n                        {item.user} {item.event}\n                      </Card.Text>\n                    </Card>\n                  </Row>\n                )\n              }\n            })\n          }\n          {\n            typing.event &&\n            <Row id=\"app-typing\" className=\"mt-3\">\n              {typing.user} is typing...\n            </Row>\n          }       \n        </Container>\n      </div>\n      <div className=\"App-footer\">\n        <Container fluid>\n          <form onSubmit={sendMessage}>\n            <InputGroup className=\"mb-3\">\n              <FormControl\n                placeholder=\"Write your message here\"\n                aria-label=\"Write your message here\"\n                aria-describedby=\"basic-addon2\"\n                value={text}\n                onChange={handleChange}\n                onBlur={typingOff}\n              />\n              <InputGroup.Append>\n                <Button onClick={sendMessage}>Send</Button>\n              </InputGroup.Append>\n            </InputGroup>\n          </form>\n        </Container>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}